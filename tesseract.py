import cv2
from cv2 import blur
from matplotlib.pyplot import gray
import pytesseract
from PIL import Image

pytesseract.pytesseract.tesseract_cmd = r'C:\\Program Files\\Tesseract-OCR\\tesseract.exe'

# image_name = "biker-without-helmet"

# Generate Path for the text file generated by YOLOv5


def generatePath(image_name):
    return r'MCSurv\\exp\\crops\\number-plate\\' + image_name + '.jpg'


# function to reduce the noise
def deNoise(image):
    import numpy as np
    kernel = np.ones((1, 1), np.uint8)
    image = cv2.dilate(image, kernel, iterations=1)
    kernel = np.ones((1, 1), np.uint8)
    image = cv2.erode(image, kernel, iterations=1)
    image = cv2.morphologyEx(image, cv2.MORPH_CLOSE, kernel)
    image = cv2.medianBlur(image, 3)
    return (image)


# function to remove borders
def removeBorders(image):
    contours, heiarchy = cv2.findContours(
        image, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    cntsSorted = sorted(contours, key=lambda x: cv2.contourArea(x))
    cnt = cntsSorted[-1]
    x, y, w, h = cv2.boundingRect(cnt)
    crop = image[y:y + h, x:x + w]
    return (crop)


def processLPlate(image_name):
    path = generatePath(image_name)
    image = cv2.imread(path)
    resize_img = cv2.resize(image, None, fx=3, fy=3,
                            interpolation=cv2.INTER_CUBIC)
    gray_image = cv2.cvtColor(resize_img, cv2.COLOR_BGR2GRAY)
    # blur_image = cv2.GaussianBlur(gray_image, (5, 5), 1)
    ret, thresh = cv2.threshold(gray_image, 160, 255, cv2.THRESH_BINARY)
    img = deNoise(thresh)
    img = removeBorders(img)
    img = cv2.bitwise_not(img)

    # using Tesseract ORC to convert image to string
    text = pytesseract.image_to_string(img)
    # cleaning up the resulting text
    resText = ""
    for a in text:
        if(a.isupper() or a.isdigit()):
            resText = resText + a
    return resText
