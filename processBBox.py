# image_name = "biker-without-helmet"


# Generate Path for the text file generated by YOLOv5
def generatePath(image_name):
    return r'MCSurv\\exp\\labels\\' + image_name + '.txt'


# Coversion of normalized xywh to Coordinates (xMin, xMax, yMin, yMax)
def getBoundaries(bbox):
    x = float(bbox[0])
    y = float(bbox[1])
    w = float(bbox[2])
    h = float(bbox[3])

    xMin = (x - w / 2)
    xMax = (x + w / 2)
    yMin = (y - h / 2)
    yMax = (y + h / 2)

    return [xMin, xMax, yMin, yMax]


# method to check the overlapping of bounding boxes using min & max coordinates
def isOverlapping(box1, box2):
    return box1[0] <= box2[1] and box2[0] <= box1[1] and box1[2] <= box2[3] and box2[2] <= box1[3]


def processBoundingBox(image_name):
    path = generatePath(image_name)
    with open(path) as f:
        boundingBoxes = []
        mcBox = []
        headBox = []
        lines = f.readlines()
        for l in lines:
            boundingBoxes.append(l.split(" "))
        for box in boundingBoxes:
            # Extracting normalized bounding boxes for with-helmet and motor-cycle classes
            if box[0] == "0":
                mcBox = [box[1], box[2], box[3], box[4]]
            if box[0] == "1":
                headBox = [box[1], box[2], box[3], box[4]]
        # print("mcBox:", mcBox, "\nheadbox :", headBox)
        if(headBox == [] or mcBox == []):
            return False
        # Conversion of normalized bounding boxes.
        mcBox = getBoundaries(mcBox)
        headBox = getBoundaries(headBox)
        return isOverlapping(mcBox, headBox)
